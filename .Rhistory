"```{r qq, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_qq_grid(df, factor_cols)",
"```",
"",
"## Correlation plots",
"```{r correlation, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_correlation_matrix(df, 'pearson', 'Pearson Correlation')",
"plot_correlation_matrix(df, 'spearman', 'Spearman Correlation')",
"plot_correlation_matrix(df, 'kendall', 'Kendall Correlation')",
"```"
)
# ----------------------------
# Zapis i renderowanie Rmd
# ----------------------------
writeLines(rmd_text, tmp_rmd)
output_path <- file.path(getwd(), file)
rmarkdown::render(tmp_rmd, output_file = output_path, quiet = TRUE)
if (open) browseURL(output_path)
}
data("PimaIndiansDiabetes")
# Użycie z iris
#data_visualization(iris, qualitative_cols = "Species", file = "iris_plots.html", open = TRUE)
#data_visualization(Cars93, qualitative_cols = "Type", file = "cars_plots_Type.html", open = TRUE)
data_visualization(PimaIndiansDiabetes, qualitative_cols = "diabetes", file = "indians_plots.html", open = TRUE)
data_visualization <- function(data, qualitative_cols = NULL, file = "plots.html", open = FALSE, css_file = "data_visualization.css") {
# ----------------------------
# Znalezienie katalogu, w którym zapisany jest ten plik z funkcją
# ----------------------------
if (requireNamespace("rstudioapi", quietly = TRUE) && rstudioapi::isAvailable()) {
fun_folder <- dirname(rstudioapi::getActiveDocumentContext()$path)
} else {
fun_folder <- getwd()
warning("Nie wykryto RStudio. Używam katalogu roboczego jako źródła plików funkcji.")
}
# ----------------------------
# Source wszystkich plików .R w katalogu (oprócz tego pliku)
# ----------------------------
fun_files <- list.files(fun_folder, pattern = "\\.R$", full.names = TRUE)
fun_files <- fun_files[!grepl("Data_Visualization\\.R$", fun_files)]
for(f in fun_files) {
source(f)
}
# ----------------------------
# Tworzenie tymczasowego pliku Rmd
# ----------------------------
tmp_rmd <- tempfile(fileext = ".Rmd")
# Jeśli CSS istnieje w katalogu funkcji, używamy go
css_path <- file.path(fun_folder, css_file)
if (!file.exists(css_path)) {
warning("Nie znaleziono pliku CSS, style zostaną pominięte.")
css_link <- ""
} else {
css_link <- paste0("css: ", css_path)
}
rmd_text <- c(
"---",
"title: \"Data Visualization\"",
"output:",
"  html_document:",
"    theme: null",
if(css_link != "") paste0("    ", css_link),
"---",
"",
"```{r setup, include=FALSE}",
"library(plotly)",
"library(ggplot2)",
"library(ggpubr)",
"library(dplyr)",
"library(GGally)",
"library(htmltools)",
"```",
"",
"```{r load-data, include=FALSE}",
"df <- data",
if(!is.null(qualitative_cols)) paste0("factor_cols <- c(", paste0('"', qualitative_cols, '"', collapse = ", "), ")") else "factor_cols <- NULL",
"```",
"",
"## GGpairs plots",
"```{r ggpairs, echo=FALSE, warning=FALSE, message=FALSE}",
"if (!is.null(factor_cols)) {",
"  for (f in factor_cols) {",
"    print(GGally::ggpairs(df, aes_string(color = f)))",
"  }",
"} else {",
"  GGally::ggpairs(df)",
"}",
"```",
"",
"## Scatter plots",
"```{r scatter, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_scatter_grid(df, factor_cols)",
"```",
"",
"## Scatter with ellipse",
"```{r scatter_ellipse, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_scatter_ellipse(df, factor_cols)",
"```",
"",
"## Histogram (normal)",
"```{r histogram_normal, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_hist_grid(df, factor_cols)",
"```",
"",
"## Histogram (log Y)",
"```{r histogram_logY, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_hist_grid_logY(df, factor_cols)",
"```",
"",
"## Density plots",
"```{r density, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_density_grid(df, factor_cols)",
"```",
"",
"## Violin plots",
"```{r violin, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_violin_grid(df, factor_cols)",
"```",
"",
"## QQ plots",
"```{r qq, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_qq_grid(df, factor_cols)",
"```",
"",
"## Correlation plots",
"```{r correlation, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_correlation_matrix(df, 'pearson', 'Pearson Correlation')",
"plot_correlation_matrix(df, 'spearman', 'Spearman Correlation')",
"plot_correlation_matrix(df, 'kendall', 'Kendall Correlation')",
"```"
)
# ----------------------------
# Zapis i renderowanie Rmd
# ----------------------------
writeLines(rmd_text, tmp_rmd)
output_path <- file.path(getwd(), file)
rmarkdown::render(tmp_rmd, output_file = output_path, quiet = TRUE)
if (open) browseURL(output_path)
}
data("PimaIndiansDiabetes")
# Użycie z iris
#data_visualization(iris, qualitative_cols = "Species", file = "iris_plots.html", open = TRUE)
#data_visualization(Cars93, qualitative_cols = "Type", file = "cars_plots_Type.html", open = TRUE)
data_visualization(PimaIndiansDiabetes, qualitative_cols = "diabetes", file = "indians_plots.html", open = TRUE)
data_visualization <- function(data, qualitative_cols = NULL, file = "plots.html", open = FALSE, css_file = "data_visualization.css") {
# ----------------------------
# Znalezienie katalogu, w którym zapisany jest ten plik z funkcją
# ----------------------------
if (requireNamespace("rstudioapi", quietly = TRUE) && rstudioapi::isAvailable()) {
fun_folder <- dirname(rstudioapi::getActiveDocumentContext()$path)
} else {
fun_folder <- getwd()
warning("Nie wykryto RStudio. Używam katalogu roboczego jako źródła plików funkcji.")
}
# ----------------------------
# Source wszystkich plików .R w katalogu (oprócz tego pliku)
# ----------------------------
fun_files <- list.files(fun_folder, pattern = "\\.R$", full.names = TRUE)
fun_files <- fun_files[!grepl("Data_Visualization\\.R$", fun_files)]
for(f in fun_files) {
source(f)
}
# ----------------------------
# Tworzenie tymczasowego pliku Rmd
# ----------------------------
tmp_rmd <- tempfile(fileext = ".Rmd")
# Jeśli CSS istnieje w katalogu funkcji, używamy go
css_path <- file.path(fun_folder, css_file)
if (!file.exists(css_path)) {
warning("Nie znaleziono pliku CSS, style zostaną pominięte.")
css_link <- ""
} else {
css_link <- paste0("css: ", css_path)
}
rmd_text <- c(
"---",
"title: \"Data Visualization\"",
"output:",
"  html_document:",
"    theme: null",
if(css_link != "") paste0("    ", css_link),
"---",
"",
"```{r setup, include=FALSE}",
"library(plotly)",
"library(ggplot2)",
"library(ggpubr)",
"library(dplyr)",
"library(GGally)",
"library(htmltools)",
"```",
"",
"```{r load-data, include=FALSE}",
"df <- data",
if(!is.null(qualitative_cols)) paste0("factor_cols <- c(", paste0('"', qualitative_cols, '"', collapse = ", "), ")") else "factor_cols <- NULL",
"```",
"",
"## GGpairs plots",
"```{r ggpairs, echo=FALSE, warning=FALSE, message=FALSE}",
"if (!is.null(factor_cols)) {",
"  for (f in factor_cols) {",
"    print(GGally::ggpairs(df, aes_string(color = f)))",
"  }",
"} else {",
"  GGally::ggpairs(df)",
"}",
"```",
"",
"## Scatter plots",
"```{r scatter, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_scatter_grid(df, factor_cols)",
"```",
"",
"## Scatter with ellipse",
"```{r scatter_ellipse, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_scatter_ellipse(df, factor_cols)",
"```",
"",
"## Histogram (normal)",
"```{r histogram_normal, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_hist_grid(df, factor_cols)",
"```",
"",
"## Histogram (log Y)",
"```{r histogram_logY, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_hist_grid_logY(df, factor_cols)",
"```",
"",
"## Density plots",
"```{r density, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_density_grid(df, factor_cols)",
"```",
"",
"## Violin plots",
"```{r violin, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_violin_grid(df, factor_cols)",
"```",
"",
"## QQ plots",
"```{r qq, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_qq_grid(df, factor_cols)",
"```",
"",
"## Correlation plots",
"```{r correlation, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_correlation_matrix(df, 'pearson', 'Pearson Correlation')",
"plot_correlation_matrix(df, 'spearman', 'Spearman Correlation')",
"plot_correlation_matrix(df, 'kendall', 'Kendall Correlation')",
"```"
)
# ----------------------------
# Zapis i renderowanie Rmd
# ----------------------------
writeLines(rmd_text, tmp_rmd)
output_path <- file.path(getwd(), file)
rmarkdown::render(tmp_rmd, output_file = output_path, quiet = TRUE)
if (open) browseURL(output_path)
}
data("PimaIndiansDiabetes")
# Użycie z iris
#data_visualization(iris, qualitative_cols = "Species", file = "iris_plots.html", open = TRUE)
#data_visualization(Cars93, qualitative_cols = "Type", file = "cars_plots_Type.html", open = TRUE)
data_visualization(PimaIndiansDiabetes, qualitative_cols = "diabetes", file = "indians_plots.html", open = TRUE)
data_visualization <- function(data, qualitative_cols = NULL, file = "plots.html", open = FALSE, css_file = "data_visualization.css") {
# ----------------------------
# Znalezienie katalogu, w którym zapisany jest ten plik z funkcją
# ----------------------------
if (requireNamespace("rstudioapi", quietly = TRUE) && rstudioapi::isAvailable()) {
fun_folder <- dirname(rstudioapi::getActiveDocumentContext()$path)
} else {
fun_folder <- getwd()
warning("Nie wykryto RStudio. Używam katalogu roboczego jako źródła plików funkcji.")
}
# ----------------------------
# Source wszystkich plików .R w katalogu (oprócz tego pliku)
# ----------------------------
fun_files <- list.files(fun_folder, pattern = "\\.R$", full.names = TRUE)
fun_files <- fun_files[!grepl("Data_Visualization\\.R$", fun_files)]
for(f in fun_files) {
source(f)
}
# ----------------------------
# Tworzenie tymczasowego pliku Rmd
# ----------------------------
tmp_rmd <- tempfile(fileext = ".Rmd")
# Jeśli CSS istnieje w katalogu funkcji, używamy go
css_path <- file.path(fun_folder, css_file)
if (!file.exists(css_path)) {
warning("Nie znaleziono pliku CSS, style zostaną pominięte.")
css_link <- ""
} else {
css_link <- paste0("css: ", css_path)
}
rmd_text <- c(
"---",
"title: \"Data Visualization\"",
"output:",
"  html_document:",
"    theme: null",
if(css_link != "") paste0("    ", css_link),
"---",
"",
"```{r setup, include=FALSE}",
"library(plotly)",
"library(ggplot2)",
"library(ggpubr)",
"library(dplyr)",
"library(GGally)",
"library(htmltools)",
"```",
"",
"```{r load-data, include=FALSE}",
"df <- data",
if(!is.null(qualitative_cols)) paste0("factor_cols <- c(", paste0('"', qualitative_cols, '"', collapse = ", "), ")") else "factor_cols <- NULL",
"```",
"",
"## GGpairs plots",
"```{r ggpairs, echo=FALSE, warning=FALSE, message=FALSE}",
"if (!is.null(factor_cols)) {",
"  for (f in factor_cols) {",
"    print(GGally::ggpairs(df, aes_string(color = f)))",
"  }",
"} else {",
"  GGally::ggpairs(df)",
"}",
"```",
"",
"## Scatter plots",
"```{r scatter, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_scatter_grid(df, factor_cols)",
"```",
"",
"## Scatter with ellipse",
"```{r scatter_ellipse, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_scatter_ellipse(df, factor_cols)",
"```",
"",
"## Histogram (normal)",
"```{r histogram_normal, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_hist_grid(df, factor_cols)",
"```",
"",
"## Histogram (log Y)",
"```{r histogram_logY, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_hist_grid_logY(df, factor_cols)",
"```",
"",
"## Density plots",
"```{r density, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_density_grid(df, factor_cols)",
"```",
"",
"## Violin plots",
"```{r violin, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_violin_grid(df, factor_cols)",
"```",
"",
"## QQ plots",
"```{r qq, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_qq_grid(df, factor_cols)",
"```",
"",
"## Correlation plots",
"```{r correlation, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_correlation_matrix(df, 'pearson', 'Pearson Correlation')",
"plot_correlation_matrix(df, 'spearman', 'Spearman Correlation')",
"plot_correlation_matrix(df, 'kendall', 'Kendall Correlation')",
"```"
)
# ----------------------------
# Zapis i renderowanie Rmd
# ----------------------------
writeLines(rmd_text, tmp_rmd)
output_path <- file.path(getwd(), file)
rmarkdown::render(tmp_rmd, output_file = output_path, quiet = TRUE)
if (open) browseURL(output_path)
}
data("PimaIndiansDiabetes")
# Użycie z iris
#data_visualization(iris, qualitative_cols = "Species", file = "iris_plots.html", open = TRUE)
#data_visualization(Cars93, qualitative_cols = "Type", file = "cars_plots_Type.html", open = TRUE)
data_visualization(PimaIndiansDiabetes, qualitative_cols = "diabetes", file = "indians_plots.html", open = TRUE)
data_visualization <- function(data, qualitative_cols = NULL, file = "plots.html", open = FALSE, css_file = "data_visualization.css") {
# ----------------------------
# Znalezienie katalogu funkcji
# ----------------------------
if (requireNamespace("rstudioapi", quietly = TRUE) && rstudioapi::isAvailable()) {
fun_folder <- dirname(rstudioapi::getActiveDocumentContext()$path)
} else {
fun_folder <- getwd()
warning("Nie wykryto RStudio. Używam katalogu roboczego jako źródła plików funkcji.")
}
# ----------------------------
# Source wszystkich plików .R w katalogu (oprócz tego pliku)
# ----------------------------
fun_files <- list.files(fun_folder, pattern = "\\.R$", full.names = TRUE)
fun_files <- fun_files[!grepl("Data_Visualization\\.R$", fun_files)]
for(f in fun_files) {
source(f)
}
# ----------------------------
# Tworzenie tymczasowego pliku Rmd
# ----------------------------
tmp_rmd <- tempfile(fileext = ".Rmd")
# Jeśli CSS istnieje, używamy go
css_path <- file.path(fun_folder, css_file)
css_link <- if (file.exists(css_path)) paste0("css: ", css_path) else ""
rmd_text <- c(
"---",
"title: \"Data Visualization\"",
"output:",
"  html_document:",
"    theme: null",
if(css_link != "") paste0("    ", css_link),
"---",
"",
"```{r setup, include=FALSE}",
"library(plotly)",
"library(ggplot2)",
"library(ggpubr)",
"library(dplyr)",
"library(GGally)",
"library(htmltools)",
"```",
"",
"```{r load-data, include=FALSE}",
"df <- data",
if(!is.null(qualitative_cols)) paste0("factor_cols <- c(", paste0('"', qualitative_cols, '"', collapse = ", "), ")") else "factor_cols <- NULL",
"```",
"",
"## GGpairs plots",
"```{r ggpairs, echo=FALSE, warning=FALSE, message=FALSE, fig.width=12, fig.height=12}",
"if (!is.null(factor_cols)) {",
"  for (f in factor_cols) {",
"    print(",
"      GGally::ggpairs(df, aes_string(color = f)) + theme_minimal(base_size = 18)",
"    )",
"  }",
"} else {",
"  print(GGally::ggpairs(df) + theme_minimal(base_size = 18))",
"}",
"```",
"",
"## Scatter plots",
"```{r scatter, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_scatter_grid(df, factor_cols)",
"```",
"",
"## Scatter with ellipse",
"```{r scatter_ellipse, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_scatter_ellipse(df, factor_cols)",
"```",
"",
"## Histogram (normal)",
"```{r histogram_normal, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_hist_grid(df, factor_cols)",
"```",
"",
"## Histogram (log Y)",
"```{r histogram_logY, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_hist_grid_logY(df, factor_cols)",
"```",
"",
"## Density plots",
"```{r density, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_density_grid(df, factor_cols)",
"```",
"",
"## Violin plots",
"```{r violin, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_violin_grid(df, factor_cols)",
"```",
"",
"## QQ plots",
"```{r qq, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_qq_grid(df, factor_cols)",
"```",
"",
"## Correlation plots",
"```{r correlation, echo=FALSE, warning=FALSE, message=FALSE}",
"plot_correlation_matrix(df, 'pearson', 'Pearson Correlation')",
"plot_correlation_matrix(df, 'spearman', 'Spearman Correlation')",
"plot_correlation_matrix(df, 'kendall', 'Kendall Correlation')",
"```"
)
# ----------------------------
# Zapis i renderowanie Rmd
# ----------------------------
writeLines(rmd_text, tmp_rmd)
output_path <- file.path(getwd(), file)
rmarkdown::render(tmp_rmd, output_file = output_path, quiet = TRUE)
if (open) browseURL(output_path)
}
data("PimaIndiansDiabetes")
# Użycie z iris
#data_visualization(iris, qualitative_cols = "Species", file = "iris_plots.html", open = TRUE)
#data_visualization(Cars93, qualitative_cols = "Type", file = "cars_plots_Type.html", open = TRUE)
data_visualization(PimaIndiansDiabetes, qualitative_cols = "diabetes", file = "indians_plots.html", open = TRUE)
# Użycie z iris
#data_visualization(iris, qualitative_cols = "Species", file = "iris_plots.html", open = TRUE)
#data_visualization(Cars93, qualitative_cols = "Type", file = "cars_plots_Type.html", open = TRUE)
data_visualization(PimaIndiansDiabetes, file = "indians_plots_bezquality.html", open = TRUE)
install.packages("devtools")
library("devtools")
devtools::install("C:/Users/bkrzy/Desktop/bkrzyEkspDane")
library(bkrzyEkspDane)
data_report(iris)
data_report(iris, open=True)
data_report(iris, open=TRUE)
install.packages(c("devtools", "roxygen2"))
setwd("C:/Users/bkrzy/Desktop/bkrzyEkspDane")
document()
devtools::document()
